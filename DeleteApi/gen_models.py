from sqlalchemy import (create_engine, Column, Date, DateTime,
                        Integer, String, Boolean, ForeignKey,
                        Float, func, Time, LargeBinary, Text)
from database import Base
from sqlalchemy.orm import relationship
import rule_engine
import datetime
import uuid
from sqlalchemy.orm import validates
from sqlalchemy.orm import relationship


class ApiSysConfig(Base):
    __tablename__ = "api_sys_config"

    id = Column(Integer, primary_key=True, index=True, unique=True)
    config_name = Column(String)


# ----- GENERATED MODELS -----
class NmsServerStatus(Base):
    __tablename__ = "nms_server_status"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    active_server = Column(Integer)
    not_active_server = Column(Integer)
    last_uptime = Column(Date)
    last_down_time = Column(Date)

    @validates('last_uptime')
    def validate_last_uptime(self, key, last_uptime):
        if not rule_engine.is_valid_date(last_uptime, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {last_uptime}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return last_uptime

    @validates('last_down_time')
    def validate_last_down_time(self, key, last_down_time):
        if not rule_engine.is_valid_date(last_down_time, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {last_down_time}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return last_down_time



class HelpdeskWebsiteLogo(Base):
    __tablename__ = "helpdesk_website_logo"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    favicon_caption = Column(String)
    website_name = Column(String)
    website_domain = Column(String)
    google_analytics_key = Column(Text)
    website_version = Column(String)
    helpdesk_website_logo_media = relationship('HelpdeskWebsiteLogoMedia', back_populates='helpdesk_website_logo', cascade='all, delete-orphan')



class HelpdeskWebsiteLogoMedia(Base):
    __tablename__ = "helpdesk_website_logo_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('helpdesk_website_logo.psk_id'))
    helpdesk_website_logo = relationship('HelpdeskWebsiteLogo', back_populates='helpdesk_website_logo_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class NmsServerDetails(Base):
    __tablename__ = "nms_server_details"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    server_name = Column(String)
    server_system = Column(String)
    server_ram_size = Column(Integer)
    server_processor = Column(String)
    server_ip_addr = Column(Text)
    server_os_version = Column(Integer)



class NmsBackup(Base):
    __tablename__ = "nms_backup"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    host_name = Column(String)
    db_engine = Column(String)
    db_name = Column(String)
    backup_file_name = Column(String)
    backup_file_size = Column(Integer)
    backup_file_loca = Column(String)
    backup_status = Column(String)
    prev_backup_time = Column(Time)
    next_backup_time = Column(Time)
    app_name = Column(String)

    @validates('prev_backup_time')
    def validate_prev_backup_time(self, key, prev_backup_time):
        if not rule_engine.is_valid_date(prev_backup_time, '%H:%M:%S'):
            raise ValueError(f"Invalid time format: {prev_backup_time}. Valid Format is HH:MM:SS and must be in range 00:00:00 - 23:59:59")
        return prev_backup_time

    @validates('next_backup_time')
    def validate_next_backup_time(self, key, next_backup_time):
        if not rule_engine.is_valid_date(next_backup_time, '%H:%M:%S'):
            raise ValueError(f"Invalid time format: {next_backup_time}. Valid Format is HH:MM:SS and must be in range 00:00:00 - 23:59:59")
        return next_backup_time



class GaplGstData(Base):
    __tablename__ = "gapl_gst_data"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    inv_no = Column(String)
    inv_date = Column(Date)
    cust_name = Column(String)

    @validates('inv_date')
    def validate_inv_date(self, key, inv_date):
        if not rule_engine.is_valid_date(inv_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {inv_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return inv_date



class Asa02010101(Base):
    __tablename__ = "asa0201_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_role_privilege = Column(Text, nullable=False)
    active = Column(String)
    user_role = Column(String, unique=True, nullable=False)



class Users(Base):
    __tablename__ = "users"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    firstname = Column(String)
    mobileno = Column(String)
    emailid = Column(String)
    role = Column(String)
    status = Column(String)
    lastname = Column(String)
    password = Column(String)
    username = Column(String)



class MenusHistory(Base):
    __tablename__ = "menus_history"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menuname = Column(String)
    menutype = Column(String)
    menuicon = Column(String)
    status = Column(String)
    menu_seq = Column(String)
    tcode = Column(String)
    menuhref = Column(String)
    menuid = Column(String)
    parentid = Column(String)
    menu_history_id = Column(String)



class ApiStudioAppName(Base):
    __tablename__ = "api_studio_app_name"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    app_id = Column(String)
    type = Column(String)
    used = Column(Boolean)
    name = Column(String)
    api_studio_app_group_id = Column(Integer, ForeignKey('api_studio_app_group.psk_id'))



class SaasApplication(Base):
    __tablename__ = "saas_application"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    uuid = Column(String)
    appname = Column(String)
    appid = Column(String)



class Name(Base):
    __tablename__ = "name"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    docid = Column(String)
    secur_id = Column(String)
    docdate = Column(Date)
    name_media = relationship('NameMedia', back_populates='name', cascade='all, delete-orphan')

    @validates('docdate')
    def validate_docdate(self, key, docdate):
        if not rule_engine.is_valid_date(docdate, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {docdate}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return docdate



class NameMedia(Base):
    __tablename__ = "name_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('name.psk_id'))
    name = relationship('Name', back_populates='name_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Kommunityapi(Base):
    __tablename__ = "kommunityapi"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    apihref = Column(String)
    filename = Column(String)
    status = Column(String)
    apiname = Column(String)



class Gmc12030101(Base):
    __tablename__ = "gmc1203_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    uuid = Column(String)
    menu_name = Column(String)
    menu_properties = Column(String)
    previlege_name = Column(String)



class Gmc12020101(Base):
    __tablename__ = "gmc1202_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    password = Column(String)
    user_type = Column(String)
    email = Column(String)
    reporting_to = Column(String)
    user_groups = Column(String)
    username = Column(String)
    uuid = Column(String)
    first_name = Column(String)

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Gmc12040101(Base):
    __tablename__ = "gmc1204_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_type = Column(String)
    mgroup_name = Column(String)
    level_no = Column(Integer)
    ordno = Column(Integer)
    dupcheck = Column(String)
    uuid = Column(String)
    menu_name = Column(String)
    visible = Column(Boolean)



class Product(Base):
    __tablename__ = "product"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    qty = Column(Integer)
    name = Column(String)
    description = Column(String)
    price = Column(String)



class Gmc12080101(Base):
    __tablename__ = "gmc1208_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    publickey = Column(String)
    secretekey = Column(String)
    createdby = Column(String)
    encryptedsk = Column(String)
    createdon = Column(String)



class Menus(Base):
    __tablename__ = "menus"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    tcode = Column(String)
    menutype = Column(String)
    menuicon = Column(String)
    parentid = Column(String)
    status = Column(String)
    menu_seq = Column(String)
    menuid = Column(String)
    menuadmin = Column(String)
    menuname = Column(String)
    menuhref = Column(String)



class AssignmenuRoleprivilege(Base):
    __tablename__ = "assignmenu_roleprivilege"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    roleid = Column(String)
    menuid = Column(String)



class Roleprivileges(Base):
    __tablename__ = "roleprivileges"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    status = Column(String)
    rolename = Column(String)
    privilege_name = Column(String)
    roles_id = Column(Integer, ForeignKey('roles.psk_id'))
    rolecode = Column(String)



class Roles(Base):
    __tablename__ = "roles"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    rolename = Column(String)
    roledesc = Column(String)
    status = Column(String)



class Gmc12010101(Base):
    __tablename__ = "gmc1201_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    user_group_type = Column(String)
    user_group_name = Column(String)
    active = Column(String)
    dupcheck = Column(String)
    uuid = Column(String)
    user_privilege = Column(String)



class ApiStudioAppGroup(Base):
    __tablename__ = "api_studio_app_group"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    name = Column(String)
    group_id = Column(String)
    parent_id = Column(Integer)
    child = Column(Boolean)



class Si01Advertisement(Base):
    __tablename__ = "si_01_advertisement"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    radio = Column(Float)
    newspaper = Column(Float)
    sales = Column(Float)
    tv = Column(Float)



class Country(Base):
    __tablename__ = "country"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    country_code = Column(String)
    Demo = Column(String)
    state = Column(Text)
    region = Column(Text, nullable=True)
    name = Column(String)
    demo1 = Column(Date)
    demo3 = Column(String)
    language = Column(Text, nullable=True)
    demo4 = Column(String)
    demo5 = Column(Text)
    demo6 = Column(Text)
    demo2 = Column(Text)
    demo_8 = Column(Text)
    demo9 = Column(String)
    demo7 = Column(String)
    country_media = relationship('CountryMedia', back_populates='country', cascade='all, delete-orphan')
    country_post = relationship('CountryPost', back_populates='country', cascade='all, delete-orphan')
    country_post_reaction = relationship('CountryPostReaction', back_populates='country', cascade='all, delete-orphan')

    @validates('demo1')
    def validate_demo1(self, key, demo1):
        if not rule_engine.is_valid_date(demo1, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {demo1}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return demo1

    @validates('demo4')
    def validate_demo4(self, key, demo4):
        if not rule_engine.is_valid_email(demo4):
            raise ValueError(f"Invalid email address: {demo4}")
        return demo4



class CountryMedia(Base):
    __tablename__ = "country_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('country.psk_id'))
    country = relationship('Country', back_populates='country_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class CountryPost(Base):
    __tablename__ = "country_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('country.psk_id'))
    country = relationship('Country', back_populates='country_post')
    post_reaction = relationship('CountryPostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class CountryPostReaction(Base):
    __tablename__ = "country_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('country.psk_id'))
    country = relationship('Country', back_populates='country_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('country_post.psk_id'))
    post = relationship('CountryPost', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class NmsAppServiceStatus(Base):
    __tablename__ = "nms_app_service_status"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    service_name = Column(String)
    app_name = Column(String)
    web_server_name = Column(String)
    running_status = Column(String)



class Sc01Post(Base):
    __tablename__ = "sc_01_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    post_date = Column(Date)
    post_ref_no = Column(String)
    post_title = Column(String)
    post_description = Column(Text)
    contact_person = Column(Integer)
    contact_emailid = Column(String)
    contact_mobile = Column(String)
    active = Column(String)
    category = Column(Integer)
    subcategory = Column(Integer)
    uom = Column(Integer)
    department = Column(String)
    contact_persons = Column(String)
    post_qty = Column(Integer)
    post_price = Column(Integer)
    company = Column(Integer)
    sc_01_post_media = relationship('Sc01PostMedia', back_populates='sc_01_post', cascade='all, delete-orphan')

    @validates('post_date')
    def validate_post_date(self, key, post_date):
        if not rule_engine.is_valid_date(post_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {post_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return post_date

    @validates('contact_emailid')
    def validate_contact_emailid(self, key, contact_emailid):
        if not rule_engine.is_valid_email(contact_emailid):
            raise ValueError(f"Invalid email address: {contact_emailid}")
        return contact_emailid



class Sc01PostMedia(Base):
    __tablename__ = "sc_01_post_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_post.psk_id'))
    sc_01_post = relationship('Sc01Post', back_populates='sc_01_post_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Sc01Category(Base):
    __tablename__ = "sc_01_category"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    category_name = Column(String)
    active = Column(String)
    category_code = Column(String, unique=True, nullable=False)
    sc_01_category_media = relationship('Sc01CategoryMedia', back_populates='sc_01_category', cascade='all, delete-orphan')



class Sc01CategoryMedia(Base):
    __tablename__ = "sc_01_category_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_category.psk_id'))
    sc_01_category = relationship('Sc01Category', back_populates='sc_01_category_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Sc01Company(Base):
    __tablename__ = "sc_01_company"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    company_code = Column(String, unique=True, nullable=False)
    company_name = Column(String)
    company_address = Column(Text)
    active = Column(String)
    company_emailid = Column(String, nullable=True)

    @validates('company_emailid')
    def validate_company_emailid(self, key, company_emailid):
        if not rule_engine.is_valid_email(company_emailid):
            raise ValueError(f"Invalid email address: {company_emailid}")
        return company_emailid



class Sc01SubCategory(Base):
    __tablename__ = "sc_01_sub_category"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    subcategory_name = Column(String)
    category_name = Column(Integer)
    active = Column(String)
    subcategory_code = Column(String)
    sc_01_sub_category_media = relationship('Sc01SubCategoryMedia', back_populates='sc_01_sub_category', cascade='all, delete-orphan')



class Sc01SubCategoryMedia(Base):
    __tablename__ = "sc_01_sub_category_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_sub_category.psk_id'))
    sc_01_sub_category = relationship('Sc01SubCategory', back_populates='sc_01_sub_category_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class NmsServerLog(Base):
    __tablename__ = "nms_server_log"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    cpu_usage = Column(Integer)
    memory_usage = Column(Integer)
    disk_usage = Column(Integer)
    event_time = Column(Time)

    @validates('event_time')
    def validate_event_time(self, key, event_time):
        if not rule_engine.is_valid_date(event_time, '%H:%M:%S'):
            raise ValueError(f"Invalid time format: {event_time}. Valid Format is HH:MM:SS and must be in range 00:00:00 - 23:59:59")
        return event_time



class Sc01Uom(Base):
    __tablename__ = "sc_01_uom"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    uom_code = Column(String, unique=True, nullable=False)
    active = Column(String, nullable=False)
    uom_name = Column(String, nullable=False)



class Si01Predictions(Base):
    __tablename__ = "si_01_predictions"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    actual = Column(Float)
    predicted = Column(Float)
    advertise_mediums = Column(Float)
    character = Column(Float)
    advertise_medium = Column(String)



class LoginUsers(Base):
    __tablename__ = "login_users"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    username = Column(String)
    password = Column(String)
    nickname = Column(String)
    emailid = Column(String)
    user_role = Column(String)
    company = Column(Integer, nullable=False)



class Sc01WebsiteSettings(Base):
    __tablename__ = "sc_01_website_settings"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    favi_icon = Column(String)
    applicaton_name = Column(String)
    application_url = Column(String)
    sc_01_website_settings_media = relationship('Sc01WebsiteSettingsMedia', back_populates='sc_01_website_settings', cascade='all, delete-orphan')



class Sc01WebsiteSettingsMedia(Base):
    __tablename__ = "sc_01_website_settings_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_website_settings.psk_id'))
    sc_01_website_settings = relationship('Sc01WebsiteSettings', back_populates='sc_01_website_settings_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02030101(Base):
    __tablename__ = "asa0203_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege_start_date = Column(Date)
    menu_privilege_end_date = Column(Date)
    active = Column(String, nullable=False)
    menu_privilege_name = Column(String, unique=True, nullable=False)

    @validates('menu_privilege_start_date')
    def validate_menu_privilege_start_date(self, key, menu_privilege_start_date):
        if not rule_engine.is_valid_date(menu_privilege_start_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_start_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_start_date

    @validates('menu_privilege_end_date')
    def validate_menu_privilege_end_date(self, key, menu_privilege_end_date):
        if not rule_engine.is_valid_date(menu_privilege_end_date, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {menu_privilege_end_date}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return menu_privilege_end_date



class ApiHcasOnlinepayment(Base):
    __tablename__ = "api_hcas_onlinepayment"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    json_payload = Column(Text)
    uuid = Column(String)



class Sc01CompanyUsers(Base):
    __tablename__ = "sc_01_company_users"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    contact_person = Column(String)
    contact_mobile = Column(String)
    contact_department = Column(String)
    sc_01_company_id = Column(Integer, ForeignKey('sc_01_company.psk_id'))
    contact_emailid = Column(String)
    user_post = Column(String)
    sc_01_company_users_media = relationship('Sc01CompanyUsersMedia', back_populates='sc_01_company_users', cascade='all, delete-orphan')

    @validates('contact_emailid')
    def validate_contact_emailid(self, key, contact_emailid):
        if not rule_engine.is_valid_email(contact_emailid):
            raise ValueError(f"Invalid email address: {contact_emailid}")
        return contact_emailid



class Sc01CompanyUsersMedia(Base):
    __tablename__ = "sc_01_company_users_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('sc_01_company_users.psk_id'))
    sc_01_company_users = relationship('Sc01CompanyUsers', back_populates='sc_01_company_users_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Si01Predict(Base):
    __tablename__ = "si_01_predict"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    actual = Column(Float)
    advertise_medium = Column(String)
    predicted = Column(Float)



class Demo(Base):
    __tablename__ = "demo"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    field1 = Column(String)



class DartUserMaster(Base):
    __tablename__ = "dart_user_master"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    last_name = Column(String)
    username = Column(String)
    user_roles = Column(Text)
    email = Column(String)
    password = Column(String)
    first_name = Column(String)
    reporting_to = Column(String)
    home_menu = Column(Text)
    user_type = Column(Text)

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Asa02020101(Base):
    __tablename__ = "asa0202_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    active = Column(String)
    menu_level = Column(Integer)
    menu_order = Column(Integer)
    menu_icon = Column(String)
    menu_app_bar = Column(String)
    menu_psk_id = Column(Integer)
    menu_href = Column(String)
    menu_psk_uid = Column(String)
    menu_type = Column(String)
    menu_uid = Column(String, unique=True, nullable=False)
    menu_parent_id = Column(Integer)
    menu_code = Column(Text, nullable=True)
    menu_name = Column(String, nullable=True)
    asa0202_01_01_media = relationship('Asa02020101Media', back_populates='asa0202_01_01', cascade='all, delete-orphan')



class Asa02020101Media(Base):
    __tablename__ = "asa0202_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0202_01_01.psk_id'))
    asa0202_01_01 = relationship('Asa02020101', back_populates='asa0202_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02050101(Base):
    __tablename__ = "asa0205_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    menu_privilege = Column(Text, nullable=False)
    menu_items = Column(Text, nullable=False)
    user_privilege_name = Column(String, nullable=True)



class Asa02040101(Base):
    __tablename__ = "asa0204_01_01"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    last_name = Column(String)
    username = Column(String, unique=True, nullable=False)
    user_roles = Column(Text)
    email = Column(String)
    password = Column(String)
    first_name = Column(String)
    reporting_to = Column(String)
    user_type = Column(Text)
    home_menu = Column(Text, nullable=True)
    active = Column(Boolean)
    asa0204_01_01_media = relationship('Asa02040101Media', back_populates='asa0204_01_01', cascade='all, delete-orphan')
    asa0204_01_01_post = relationship('Asa02040101Post', back_populates='asa0204_01_01', cascade='all, delete-orphan')
    asa0204_01_01_post_reaction = relationship('Asa02040101PostReaction', back_populates='asa0204_01_01', cascade='all, delete-orphan')

    @validates('email')
    def validate_email(self, key, email):
        if not rule_engine.is_valid_email(email):
            raise ValueError(f"Invalid email address: {email}")
        return email



class Asa02040101Media(Base):
    __tablename__ = "asa0204_01_01_media"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0204_01_01.psk_id'))
    asa0204_01_01 = relationship('Asa02040101', back_populates='asa0204_01_01_media')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    attachment_content = Column(Text)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02040101Post(Base):
    __tablename__ = "asa0204_01_01_post"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0204_01_01.psk_id'))
    asa0204_01_01 = relationship('Asa02040101', back_populates='asa0204_01_01_post')
    post_reaction = relationship('Asa02040101PostReaction', back_populates='post')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    post_comment = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    file_blob = Column(LargeBinary)
    file_mime = Column(String)
    file_name = Column(String)
    file_path = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)


class Asa02040101PostReaction(Base):
    __tablename__ = "asa0204_01_01_post_reaction"

    psk_id = Column(Integer, primary_key=True, index=True)
    psk_uid = Column(String, default=uuid.uuid4)
    parent_psk_id = Column(Integer, ForeignKey('asa0204_01_01.psk_id'))
    asa0204_01_01 = relationship('Asa02040101', back_populates='asa0204_01_01_post_reaction')
    post_psk_id = Column(Integer, ForeignKey('asa0204_01_01_post.psk_id'))
    post = relationship('Asa02040101Post', back_populates='post_reaction')
    app_id = Column(String)
    user_id = Column(String)
    row_order = Column(Integer)
    reaction = Column(String)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, default=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)




class Am1(Base):
    __tablename__ = "am1"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    t2 = Column(String, nullable=True)
    t1 = Column(String, unique=True, nullable=False)
    t3 = Column(String, nullable=True)



class Am(Base):
    __tablename__ = "am"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    age = Column(Integer)
    username = Column(String, nullable=False)
    first_name = Column(String, nullable=True)
    test = Column(String, nullable=True)
    demo = Column(String, nullable=True)
    demo1 = Column(String, nullable=True)
    demo2 = Column(String, nullable=True)
    demo3 = Column(String, nullable=True)
    a2 = Column(String, nullable=True)
    a3 = Column(String, nullable=True)
    sample = Column(Date)
    sample2 = Column(String)
    a1 = Column(String, nullable=False)
    b1 = Column(Text)
    a4 = Column(String, nullable=True)

    @validates('sample')
    def validate_sample(self, key, sample):
        if not rule_engine.is_valid_date(sample, ('%d-%m-%Y', '%Y-%m-%d')):
            raise ValueError(f"Invalid date format: {sample}. Valid Format is DD-MM-YYYY or YYYY-MM-DD")
        return sample



class TestingTbl11(Base):
    __tablename__ = "testing_tbl11"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    t2 = Column(String)
    t1 = Column(String)
    t3 = Column(String)



class Gmc177007(Base):
    __tablename__ = "gmc177007"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    t2 = Column(String)
    t1 = Column(String)
    t3 = Column(String)



class Gmc183003(Base):
    __tablename__ = "gmc183003"

    psk_id = Column(Integer, primary_key=True, index=True)
    transaction_id = Column(Integer)
    transaction_remarks = Column(Text)
    api_id = Column(String)
    app_psk_id = Column(Integer)
    app_uid = Column(String)
    psk_uid = Column(String, default=uuid.uuid4)
    user_id = Column(Integer)
    created_by = Column(String)
    created_on = Column(DateTime, default=func.now())
    updated_by = Column(String)
    updated_on = Column(DateTime, onupdate=func.now())
    cancel_by = Column(String)
    cancel_on = Column(DateTime)
    cancel_status = Column(String)
    cancel_remarks = Column(String)
    approval_level_1 = Column(Integer)
    approval_level_2 = Column(Integer)
    approval_remarks = Column(Integer)
    workflow_id = Column(String)
    workflow_role = Column(String)
    row_order = Column(Integer)
    gis_latitude = Column(Float)
    gis_longitude = Column(Float)
    cdn_location = Column(String)
    t2 = Column(String)
    t1 = Column(String)
    t3 = Column(String)



